name: Duplicate Release to Another Repo

on:
  push:
    branches:
      - master
jobs:
  duplicate-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Generate GitHub App Token
        id: get-token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}
          installation_id: ${{ secrets.APP_INSTALLATION_ID }}
      
      - name: Install dependencies
        run: sudo apt-get install -y jq curl
        
      - name: Get latest release from source repository
        env:
          GH_TOKEN: ${{ steps.get-token.outputs.token }}
        run: |
          # Define repositories
          SOURCE_REPO="Dawascope-Technologies/Desktop_POS_Server"
          TARGET_REPO="Dawascope-Technologies/dw_builds"
          
          echo "Fetching latest release from $SOURCE_REPO..."
          
          # Fetch the latest release using the GitHub App token
          RELEASE=$(curl -s -H "Authorization: Bearer $GH_TOKEN" \
            "https://api.github.com/repos/$SOURCE_REPO/releases/latest")
          
          # Check if release exists
          if [ "$(echo $RELEASE | jq -r '.message')" == "Not Found" ] || [ "$RELEASE" == "null" ]; then
            echo "No releases found for $SOURCE_REPO, creating empty release..."
            
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            RELEASE_TAG="release_${TIMESTAMP}"
            RELEASE_NAME="Auto Release ${TIMESTAMP}"
            
            echo "{\"tag_name\": \"$RELEASE_TAG\", \"name\": \"$RELEASE_NAME\"}" > release_data.json
            exit 0
          fi
          
          # Save release data
          echo $RELEASE > release_data.json
          
          # Get release details
          RELEASE_TAG=$(echo $RELEASE | jq -r .tag_name)
          RELEASE_NAME=$(echo $RELEASE | jq -r .name)
          
          echo "Found release: $RELEASE_NAME (tag: $RELEASE_TAG)"
          
          # Log available assets
          echo "Available assets:"
          echo $RELEASE | jq -r '.assets[] | "\(.name) - \(.size) bytes"'
          
          # Fetch assets with GitHub App token
          ASSET_URLS=$(echo $RELEASE | jq -r '.assets[] | select(.name | endswith(".exe")) | .browser_download_url')
          
          if [ -z "$ASSET_URLS" ]; then
            echo "No .exe files found in the release."
            exit 1
          fi
          
          # Download each asset
          echo "$ASSET_URLS" | while read -r ASSET_URL; do
            ASSET_NAME=$(basename "$ASSET_URL")
            echo "Downloading $ASSET_NAME from $ASSET_URL"
            
            # Download with progress and error checking
            if curl -L -v \
              -H "Authorization: Bearer $GH_TOKEN" \
              -H "Accept: application/octet-stream" \
              -o "$ASSET_NAME" \
              "$ASSET_URL"; then
              
              # Verify file size
              EXPECTED_SIZE=$(echo $RELEASE | jq -r ".assets[] | select(.browser_download_url == \"$ASSET_URL\") | .size")
              ACTUAL_SIZE=$(stat -f %z "$ASSET_NAME" 2>/dev/null || stat -c %s "$ASSET_NAME")
              
              echo "Expected size: $EXPECTED_SIZE bytes"
              echo "Actual size: $ACTUAL_SIZE bytes"
              
              if [ "$ACTUAL_SIZE" -ne "$EXPECTED_SIZE" ]; then
                echo "Error: File size mismatch for $ASSET_NAME"
                exit 1
              fi
              
              echo "Successfully downloaded $ASSET_NAME"
            else
              echo "Error downloading $ASSET_NAME"
              exit 1
            fi
          done
      
      - name: Create release in target repository
        env:
          GH_TOKEN: ${{ steps.get-token.outputs.token }}
        run: |
          TARGET_REPO="Dawascope-Technologies/dw_builds"
          
          # Load release data
          RELEASE_DATA=$(cat release_data.json)
          RELEASE_TAG=$(echo $RELEASE_DATA | jq -r .tag_name)
          RELEASE_NAME=$(echo $RELEASE_DATA | jq -r .name)
          
          echo "Creating release $RELEASE_NAME in $TARGET_REPO..."
          
          # Create release
          RESPONSE=$(curl -v -X POST \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "tag_name": "'"$RELEASE_TAG"'",
              "name": "'"$RELEASE_NAME"'",
              "body": "Duplicated release from source repository",
              "draft": false,
              "prerelease": false
            }' \
            "https://api.github.com/repos/$TARGET_REPO/releases")
          
          # Save release ID and check for success
          echo $RESPONSE | jq -r .id > release_id.txt
          
          if [ "$(cat release_id.txt)" == "null" ]; then
            echo "Failed to create release. Response:"
            echo $RESPONSE | jq '.'
            exit 1
          fi
          
          echo "Release created successfully with ID: $(cat release_id.txt)"
      
      - name: Upload assets to target release
        env:
          GH_TOKEN: ${{ steps.get-token.outputs.token }}
        run: |
          TARGET_REPO="Dawascope-Technologies/dw_builds"
          RELEASE_ID=$(cat release_id.txt)
          
          # Find and upload .exe files
          for ASSET_FILE in *.exe; do
            if [ -f "$ASSET_FILE" ]; then
              echo "Uploading $ASSET_FILE to release..."
              
              # Get local file size
              LOCAL_SIZE=$(stat -f %z "$ASSET_FILE" 2>/dev/null || stat -c %s "$ASSET_FILE")
              echo "Local file size: $LOCAL_SIZE bytes"
              
              # Upload with verbose output and proper headers
              UPLOAD_RESPONSE=$(curl -v -X POST \
                -H "Authorization: Bearer $GH_TOKEN" \
                -H "Content-Type: application/octet-stream" \
                -H "Content-Length: $LOCAL_SIZE" \
                --data-binary @"$ASSET_FILE" \
                "https://uploads.github.com/repos/$TARGET_REPO/releases/$RELEASE_ID/assets?name=$(basename $ASSET_FILE)")
              
              # Verify upload
              UPLOADED_SIZE=$(echo $UPLOAD_RESPONSE | jq -r '.size')
              if [ "$UPLOADED_SIZE" != "null" ] && [ "$UPLOADED_SIZE" -eq "$LOCAL_SIZE" ]; then
                echo "Successfully uploaded $ASSET_FILE (size: $UPLOADED_SIZE bytes)"
              else
                echo "Error uploading $ASSET_FILE. Response:"
                echo $UPLOAD_RESPONSE | jq '.'
                exit 1
              fi
            fi
          done