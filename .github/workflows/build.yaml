name: Duplicate Release to Another Repo

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  duplicate-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Generate GitHub App Token
        id: get-token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}
          installation_id: ${{ secrets.APP_INSTALLATION_ID }}
      
      - name: Install dependencies
        run: sudo apt-get install -y jq curl
        
      - name: Get latest release from source repository
        env:
          GH_TOKEN: ${{ steps.get-token.outputs.token }}
        run: |
          # Define repositories
          SOURCE_REPO="Dawascope-Technologies/Desktop_POS_Server"
          TARGET_REPO="Dawascope-Technologies/dw_builds"
          
          echo "Using token (first 10 chars): ${GH_TOKEN:0:10}..."
          
          echo "Fetching latest release from $SOURCE_REPO..."
          
          # Debug: Check API access
          echo "Testing API access..."
          TEST_RESPONSE=$(curl -i -H "Authorization: Bearer $GH_TOKEN" \
            "https://api.github.com/repos/$SOURCE_REPO")
          echo "API test response headers:"
          echo "$TEST_RESPONSE" | grep "^HTTP\|^Rate-Limit\|^X-OAuth-Scopes"
          
          # Fetch the latest release
          echo "Fetching release info..."
          RELEASE_RESPONSE=$(curl -i -H "Authorization: Bearer $GH_TOKEN" \
            "https://api.github.com/repos/$SOURCE_REPO/releases/latest")
          
          echo "Release API response headers:"
          echo "$RELEASE_RESPONSE" | grep "^HTTP\|^Rate-Limit\|^X-OAuth-Scopes"
          
          # Extract JSON body from response (skip headers)
          RELEASE=$(echo "$RELEASE_RESPONSE" | awk 'BEGIN{RS="\r\n\r\n"} NR==2')
          
          # Debug: Print release info
          echo "Release JSON:"
          echo "$RELEASE" | jq '.'
          
          # Check if release exists
          if [ "$(echo $RELEASE | jq -r '.message')" == "Not Found" ] || [ "$RELEASE" == "null" ]; then
            echo "No releases found for $SOURCE_REPO"
            exit 1
          fi
          
          # Save release data
          echo $RELEASE > release_data.json
          
          # Get and validate release details
          RELEASE_TAG=$(echo $RELEASE | jq -r .tag_name)
          RELEASE_NAME=$(echo $RELEASE | jq -r .name)
          
          echo "Found release: $RELEASE_NAME (tag: $RELEASE_TAG)"
          
          # Debug: Print all assets information
          echo "Full assets information:"
          echo $RELEASE | jq -r '.assets[]'
          
          # Get asset details
          ASSET_INFO=$(echo $RELEASE | jq -r '.assets[] | select(.name | endswith(".exe"))')
          
          if [ -z "$ASSET_INFO" ]; then
            echo "No .exe files found in the release."
            exit 1
          fi
          
          echo "Asset info:"
          echo "$ASSET_INFO" | jq '.'
          
          # Extract asset URL and download URL
          ASSET_URL=$(echo "$ASSET_INFO" | jq -r .url)
          BROWSER_URL=$(echo "$ASSET_INFO" | jq -r .browser_download_url)
          
          echo "Asset API URL: $ASSET_URL"
          echo "Browser download URL: $BROWSER_URL"
          
          # First try to get the asset details
          echo "Checking asset details..."
          ASSET_DETAILS=$(curl -i -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/octet-stream" \
            "$ASSET_URL")
          
          echo "Asset details response headers:"
          echo "$ASSET_DETAILS" | grep "^HTTP\|^Location\|^Content-Length"
          
          # Download the asset with debug information
          echo "Downloading asset..."
          DOWNLOAD_RESPONSE=$(curl -i \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/octet-stream" \
            -L \
            -o asset_download.exe \
            "$BROWSER_URL")
          
          echo "Download response headers:"
          echo "$DOWNLOAD_RESPONSE" | grep "^HTTP\|^Content-Length"
          
          # Check downloaded file
          echo "Downloaded file details:"
          ls -l asset_download.exe
          
          echo "First 100 bytes of downloaded file (hex):"
          hexdump -C asset_download.exe | head -n 5
          
          echo "File content if small:"
          if [ $(stat -f %z asset_download.exe 2>/dev/null || stat -c %s asset_download.exe) -lt 1000 ]; then
            cat asset_download.exe
          fi
          
          # Verify file size
          EXPECTED_SIZE=$(echo "$ASSET_INFO" | jq -r .size)
          ACTUAL_SIZE=$(stat -f %z asset_download.exe 2>/dev/null || stat -c %s asset_download.exe)
          
          echo "Expected size: $EXPECTED_SIZE bytes"
          echo "Actual size: $ACTUAL_SIZE bytes"
          
          if [ "$ACTUAL_SIZE" -ne "$EXPECTED_SIZE" ]; then
            echo "Size mismatch - debugging information:"
            echo "Token permissions:"
            curl -H "Authorization: Bearer $GH_TOKEN" https://api.github.com/user | jq '.permissions'
            echo "Rate limit status:"
            curl -H "Authorization: Bearer $GH_TOKEN" https://api.github.com/rate_limit
            exit 1
          fi