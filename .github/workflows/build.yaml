name: Duplicate Release to Another Repo
on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  duplicate-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Generate GitHub App Token
        id: get-token
        uses: tibdex/github-app-token@v2
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}
          installation_id: ${{ secrets.APP_INSTALLATION_ID }}
      
      - name: Setup GitHub CLI
        run: |
          mkdir -p $HOME/.config/gh
          echo "github.com:" > $HOME/.config/gh/hosts.yml
          echo "    oauth_token: ${{ steps.get-token.outputs.token }}" >> $HOME/.config/gh/hosts.yml
      
      - name: Install dependencies
        run: sudo apt-get install -y jq curl zip
        
      - name: Get latest releases and download assets
        env:
          GH_TOKEN: ${{ steps.get-token.outputs.token }}
        run: |
          # Define repositories
          SERVER_REPO="Dawascope-Technologies/Desktop_POS_Server"
          CLIENT_REPO="Dawascope-Technologies/client-installer"
          TARGET_REPO="Dawascope-Technologies/dw_builds"
          
          # Create downloads directories
          mkdir -p ./downloads/server
          mkdir -p ./downloads/client
          
          # Download server assets and get version
          echo "Fetching latest release from $SERVER_REPO..."
          SERVER_VER=$(gh release view --repo $SERVER_REPO --json tagName --jq '.tagName')
          echo "server_version=$SERVER_VER" >> $GITHUB_ENV
          
          if ! gh release download --repo $SERVER_REPO --pattern "*.exe" --dir ./downloads/server; then
            echo "Failed to download server release assets"
            exit 1
          fi
          
          # Download client assets and get version
          echo "Fetching latest release from $CLIENT_REPO..."
          CLIENT_VER=$(gh release view --repo $CLIENT_REPO --json tagName --jq '.tagName')
          echo "client_version=$CLIENT_VER" >> $GITHUB_ENV
          
          if ! gh release download --repo $CLIENT_REPO --pattern "*.exe" --dir ./downloads/client; then
            echo "Failed to download client release assets"
            exit 1
          fi
          
          # Verify downloads
          if [ ! "$(ls -A ./downloads/server)" ] || [ ! "$(ls -A ./downloads/client)" ]; then
            echo "Missing downloaded assets"
            exit 1
          fi
          
          # Create ZIP file
          ZIP_NAME="dawascope.zip"
          
          cd downloads
          zip -r "../$ZIP_NAME" ./*
          cd ..
          
          echo "Created ZIP file: $ZIP_NAME"
          echo "zip_name=$ZIP_NAME" >> $GITHUB_ENV
          
          # List contents to verify
          echo "ZIP contents:"
          unzip -l "$ZIP_NAME"
      
      - name: Create and upload to target release
        env:
          GH_TOKEN: ${{ steps.get-token.outputs.token }}
        run: |
          TARGET_REPO="Dawascope-Technologies/dw_builds"
          
          # Set up release tag and name
          RELEASE_TAG="latest"
          RELEASE_NAME="Dawascope Installation Packages"
          
          TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")
          
          # Create notes with version info
          NOTES="Latest installer package updated on $TIMESTAMP GMT
          
          Server Version: ${{ env.server_version }}
          Client Version: ${{ env.client_version }}"
          
          echo "Creating release in target repository..."
          
          # Delete existing release if it exists
          if gh release view "$RELEASE_TAG" --repo "$TARGET_REPO" &>/dev/null; then
            echo "Deleting existing release with tag $RELEASE_TAG"
            gh release delete "$RELEASE_TAG" --repo "$TARGET_REPO" --yes || true
          fi
          
          # Create release with only ZIP file as asset
          gh release create "$RELEASE_TAG" \
            --repo "$TARGET_REPO" \
            --title "$RELEASE_NAME" \
            --notes "$NOTES" \
            --generate-notes=false \
            "${{ env.zip_name }}"
          
          echo "Release created and ZIP uploaded successfully"