name: Fetch Latest Releases

on:
  push:
    branches:
      - master  # Trigger on pushes to master
jobs:
  fetch-releases:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get install -y jq curl

      - name: Get latest releases and commit executables
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Define the specific repository
          REPO="Dawascope-Technologies/Desktop_POS_Server"

          # Initialize variables
          FOUND_REPO=false  # Set to false initially

          # Initialize the summary file
          echo "# Latest Releases" > releases.md
          echo "Fetching latest release from $REPO"
            
          # Fetch release details using the GitHub API
          RELEASE=$(curl -s "https://api.github.com/repos/$REPO/releases/latest")
            
          # Check for errors in the API response
          if [ "$(echo $RELEASE | jq -r '.message')" == "Not Found" ] || [ "$RELEASE" == "null" ]; then
            echo "No releases found for $REPO."
            echo "## $REPO" >> releases.md
            echo "- No releases found." >> releases.md
            echo "" >> releases.md
          else
            RELEASE_TAG=$(echo $RELEASE | jq -r .tag_name)
            RELEASE_NAME=$(echo $RELEASE | jq -r .name)
            RELEASE_URL=$(echo $RELEASE | jq -r .html_url)

            # Log all assets to see what is available
            echo "Available assets:"
            echo $RELEASE | jq -r '.assets[] | .name'  # List all asset names

            # Fetch assets and find the .exe file
            ASSET_URL=$(echo $RELEASE | jq -r '.assets[] | select(.name | endswith(".exe")) | .browser_download_url')
            ASSET_NAME=$(echo $RELEASE | jq -r '.assets[] | select(.name | endswith(".exe")) | .name')

            # Check if an .exe file exists
            if [ -n "$ASSET_URL" ]; then
              echo "Downloading $ASSET_NAME from $ASSET_URL"
              curl -L -o "$ASSET_NAME" "$ASSET_URL"
              echo "Downloaded $ASSET_NAME successfully."

              # Mark the repository as found
              FOUND_REPO=true

              # Move the .exe file to the repository root
              mv "$ASSET_NAME" ./
              git add "$ASSET_NAME"

              # Append details to the summary file
              echo "## $REPO" >> releases.md
              echo "- Version: $RELEASE_TAG" >> releases.md
              echo "- Name: $RELEASE_NAME" >> releases.md
              echo "- URL: $RELEASE_URL" >> releases.md
              echo "- Downloaded File: $ASSET_NAME" >> releases.md
              echo "" >> releases.md
            else
              echo "No .exe file found for $REPO."
              echo "## $REPO" >> releases.md
              echo "- Version: $RELEASE_TAG" >> releases.md
              echo "- Name: $RELEASE_NAME" >> releases.md
              echo "- URL: $RELEASE_URL" >> releases.md
              echo "- No .exe file found in the release." >> releases.md
              echo "" >> releases.md
            fi
          fi

          # Print whether the repository with .exe was found
          if [ "$FOUND_REPO" = true ]; then
            echo "true"  # Print true if an .exe file was found
          else
            echo "false"  # Print false if no .exe file was found
          fi

          # Commit the changes
          echo "Committing downloaded files and releases summary."
          git add releases.md
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git commit -m "Add downloaded .exe files and releases summary [skip ci]"
          git push
